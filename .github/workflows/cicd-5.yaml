name: cicd-5
on:
  push:
    paths:
    - 'my-app/**'
    tags:
    - 'v[0-9]+.[0-9]+.[0-9]+'
  pull_request:
    types: [opened, synchronize, closed]
    branches: [dev, master]
    paths:
    - 'my-app/**' 

jobs:
  test:
    if: github.event.action == 'opened' || github.event.action == 'synchronize'
    runs-on: ubuntu-latest
    steps:
    - name: checkout the code
      uses: actions/checkout@v4
    - name: checkout module code
      uses: actions/checkout@v4
      with:
        repository: "action-sang/github-action-module"
        path: ./actions-module
        ref: ${{ vars.VERSION }}
    - name: use test module
      uses: ./actions-module/test
      with:
        NODE_VERSION: '18'
        WORKING_DIRECTORY: 'my-app'

  set-environment:
    if: github.event.pull_request.merged == true || github.ref_type == 'tag'
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set-env.outputs.environment }}
    steps:
    - name: checkout module code
      uses: actions/checkout@v4
      with:
        repository: "action-sang/github-action-module"
        path: ./actions-module
        ref: ${{ vars.VERSION }}        
    - name: use set env module
      uses: ./actions-module/set-env
      with:
        REF_TYPE: ${{ github.ref_type }}
        BASE_REF: ${{ github.base_ref }}

  image-build:
    runs-on: ubuntu-latest
    needs: [set-environment]
    permissions:
      id-token: write
      contents: read
    strategy:
      matrix:
        environment: ["${{ needs.set-environment.outputs.environment }}"]
    environment: ${{ matrix.environment }}
    steps:
    - name: checkout the code
      uses: actions/checkout@v4
    # - name: Configure AWS Credentials
    #   id: credentials
    #   uses: aws-actions/configure-aws-credentials@v4
    #   with:
    #     aws-region: ${{ vars.AWS_REGION }}
    #     role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
    # - name: Login to Amazon ECR
    #   id: login-ecr
    #   uses: aws-actions/amazon-ecr-login@v2
    #   with:
    #     mask-password: 'true'
    # - name: docker build & push
    #   run: |
    #     docker build -f Dockerfile --tag ${{ secrets.REGISTRY }}/${{ vars.REPOSITORY }}:${{ github.sha }} .
    #     docker push ${{ secrets.REGISTRY }}/${{ vars.REPOSITORY }}:${{ github.sha }}
  
  deploy:
    runs-on: ubuntu-latest
    needs: [ set-environment, image-build ]
    permissions:
      id-token: write
      contents: read
    strategy:
      matrix:
        environment: ["${{ needs.set-environment.outputs.environment }}"]
    environment: ${{ matrix.environment }}  
    steps:
    - name: checkout the code
      uses: actions/checkout@v4
    - name: checkout module code
      uses: actions/checkout@v4
      with:
        repository: "action-sang/github-action-module"
        path: ./actions-module
        ref: ${{ vars.VERSION }}        
    - name: Configure AWS Credentials
      id: credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: ${{ vars.AWS_REGION }}
        role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
    - name: setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: latest
    - name: setup helm
      uses: azure/setup-helm@v3
      with:
        version: v3.11.1
    - name: access kubernetes
      run: |
        aws eks update-kubeconfig --name ${{ vars.CLUSTER_NAME }}
    - name: deploy
      id: status
      run: |
        helm upgrade --install my-app kubernetes/my-app --create-namespace --namespace my-app-${{ vars.SUFFIX }} \
        --set image.tag=${{ github.sha }} \
        --set image.repository=${{ secrets.REGISTRY }}/${{ vars.REPOSITORY }}
    - name: use slack module
      if: always()
      uses: ./actions-module/slack
      with:
        DEPLOY_STEP_STATUS: ${{ steps.status.outcome }}
        ENVIRONMENT: ${{ matrix.environment }}
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  create-pr:
    if: needs.set-environment.outputs.environment == 'qa'
    runs-on: ubuntu-latest
    needs: [set-environment, deploy]
    steps:
    - name: checkout
      uses: actions/checkout@v4
    - name: checkout module code
      uses: actions/checkout@v4
      with:
        repository: "action-sang/github-action-module"
        path: ./actions-module
        ref: ${{ vars.VERSION }}        
    - name: use create pr module
      uses: ./actions-module/create-pr
      with:
        PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        HEAD: release/${{ github.ref_name }}
        BASE: master